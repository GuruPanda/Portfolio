#BlueJ class context
comment0.params=x\ y
comment0.target=Board(int,\ int)
comment0.text=\r\n\ Creates\ new\ board\ and\ makes\ a\ call\ to\ setBoardSize\ method.\r\n\ \r\n\ @param\ \ sizeX\ \ \ \ \ \ how\ wide\ the\ board\ will\ be\r\n\ @param\ \ sizeY\ \ \ \ \ \ how\ tall\ the\ board\ will\ be\r\n\ \r\n
comment1.params=sizeX\ sizeY
comment1.target=boolean\ setBoardSize(int,\ int)
comment1.text=\r\n\ Specifiy\ the\ size\ of\ the\ board\ that\ we\ are\ playing\ on.\ Both\ numbers\ must\ be\ greater\ than\ zero\r\n\ \r\n\ @param\ \ sizeX\ \ \ \ \ \ how\ wide\ the\ board\ will\ be\r\n\ @param\ \ sizeY\ \ \ \ \ \ how\ tall\ the\ board\ will\ be\r\n\ @returns\ boolean\ \ \ true\ if\ the\ board\ could\ be\ set\ successfully\r\n\ \r\n\ @throws\ InvalidBoardSizeException\ \ If\ either\ size\ value\ is\ less\ than\ one.\r\n\ @throws\ BoardAlreadySizedException\ If\ the\ board\ has\ already\ been\ created.\r\n\ \r\n\ Creates\ a\ copy\ of\ the\ board\ size\ to\ be\ used\ in\ the\ gameWon\ method.\r\n\ Sets\ all\ cells\ to\ UNSET\ to\ begin\ with.\r\n
comment2.params=
comment2.target=Piece[][]\ getBoardView()
comment2.text=\r\n\ This\ method\ will\ return\ a\ two\ dimentional\ array\ of\ Pieces\ which\ represents\ the\ current\ state\ of\ the\ \r\n\ board.\ As\ this\ is\ just\ a\ copy\ of\ the\ data\ it\ is\ safe\ to\ send\ to\ a\ Player.\r\n\ \r\n\ @returns\ Piece[][]\ \ a\ two\ dimentional\ representation\ of\ the\ game\ board.\r\n\ \r\n\ @throws\ \ NoBoardDefinedException\ \ \ Thrown\ when\ a\ call\ is\ made\ to\ this\ method\ before\ the\ boardSize\ \r\n\ method.\r\n
comment3.params=colour\ move
comment3.target=boolean\ placePiece(Piece,\ MoveInterface)
comment3.text=\r\n\ Places\ a\ piece\ on\ the\ board\ at\ the\ specified\ location.\r\n\ \r\n\ @param\ colour\ \ \ \ \ the\ colour\ of\ the\ piece\ to\ place\ (RED\ or\ BLUE)\r\n\ @param\ move\ \ \ \ \ \ \ the\ position\ where\ you\ wish\ to\ place\ a\ piece\r\n\ @return\ boolean\ \ \ true\ if\ the\ piece\ was\ placed\ successfully\r\n\ \r\n\ @throws\ PositionAlreadyTakenException\ \ \ if\ there\ is\ already\ a\ Piece\ in\ this\ position\r\n\ @throws\ InvalidPositionException\ \ \ \ \ \ \ \ if\ the\ specified\ position\ is\ invalid\ -\ e.g.\ (-1,\ -1)\r\n\ @throws\ InvalidColourException\ \ \ \ \ \ \ \ \ \ if\ the\ colour\ being\ set\ is\ invalid.\ E.g.\ if\ you\ try\ to\ place\ two\ BLUE\ pieces\ one\ after\ the\ other\r\n
comment4.params=
comment4.target=Piece\ gameWon()
comment4.text=\r\n\ Checks\ to\ see\ if\ either\ player\ has\ won.\r\n\ \r\n\ @return\ Piece\ \ \ RED\ if\ red\ has\ won,\ BLUE\ if\ blue\ has\ won,\ UNSET\ if\ neither\ player\ has\ won.\r\n\ \r\n\ @throws\ NoBoardDefinedException\ \ Indicates\ that\ this\ method\ has\ been\ called\ before\ the\ boardSize\ \r\n\ method\r\n
comment5.params=
comment5.target=boolean\ checkWin()
comment5.text=\r\n\ Queue\ starts\ essentially\ looks\ to\ see\ if\ there\ are\ any\ cells\ filled\ at\ one\ side\ of\ the\r\n\ grid\ with\ a\ specific\ colour.\ (Looks\ at\ the\ top\ row\ of\ the\ grid\ to\ check\ for\ RED,\ \r\n\ rightmost\ column\ for\ BLUE).\r\n\ \r\n\ Method\ makes\ identical\ copy\ of\ grid.\r\n\ Checks\ for\ last\ move\ colour\ and\ then...\r\n\ -If\ there\ are\ no\ RED\ cells\ in\ the\ top\ row\ then\ the\ game\ gannot\ be\ won,\ returns\ false.\r\n\ -If\ there\ are\ no\ BLUE\ cells\ in\ rightmost\ column\ game\ not\ won,\ returns\ false.\r\n\ If\ there\ are\ any\ of\ either,\ added\ to\ starts\ queue.\r\n\ Each\ cell\ in\ starts\ queue\ makes\ a\ call\ to\ breadthFS\ methos,\ then\ cell\ is\ removed\ from\ starts.\r\n
comment6.params=cell\ colour
comment6.target=boolean\ breadthFS(int[],\ Piece)
comment6.text=\r\n\ Cell\ passed\ from\ checkWin\ method\ is\ set\ to\ UNSET\ in\ copy\ of\ board.\r\n\ Makes\ call\ to\ findAdjacents\ to\ see\ if\ there\ are\ any\ adjacent\ cells\ of\ same\ colour.\r\n\ If\ there\ are,\ adds\ to\ path.\r\n\ If\ a\ path\ can\ be\ found\ from\ one\ side\ of\ the\ board\ to\ the\ other\ made\ of\ \r\n\ adjaent\ cells,\ returns\ true,\ else\ false.\r\n\ Checkwin\ then\ goes\ to\ the\ next\ cell\ in\ the\ starts\ queue\ and\ checks\ that.\r\n
comment7.params=cell\ colour
comment7.target=findAdjacents(int[],\ Piece)
comment7.text=\r\n\ Looks\ at\ all\ cells\ on\ board\ and\ checks\ if\ current\ cell\ is\ of\ same\ colour\ as\ @param\ colour\r\n\ Checks,\ through\ call\ to\ isAdjacent,\ if\ current\ cell,\ is\ \ adjacent\ to\ @param\ cell.\r\n\ \r\n
comment8.params=x\ y\ a\ b
comment8.target=boolean\ isAdjacent(int,\ int,\ int,\ int)
comment8.text=\r\n\ Given\ two\ cell\ coordinates,\ checks\ if\ they\ are\ adjacent,\ according\ to\ hex\ grid.\r\n
numComments=9
